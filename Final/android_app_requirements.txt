I need an android studio app that takes these backend routes:
router.get("/car/", async (req, res) => {
  const cars = await Car.find();
  res.status(200).send({ data: cars });
});

router.get("/car/:id", async (req, res) => {
  const car = await Car.findOne({ _id: req.params.id });
  res.status(200).send({ data: car });
});

router.post("/auth/register", async (req, res) => {

  // Check if user exists
  const isBusy = await User.findOne({ email: req.body.email });
  if (isBusy) {
    res.status(400).send("Логин зайнит");
    return;
    // throw new Error("");
  }

  // Hash password
  const salt = await bcrypt.genSalt(10);
  const newPassword = await bcrypt.hash(req.body.password, salt);

  // Create user
  const user = await User.create({
    email: req.body.email,
    password: newPassword,
    role: req.body.role
  });
  if (user) {
    res.status(201).json({
      message: "Пользователь создан",
      status: "Успешно",
    });
  } else {
    res.status(400).send("Пользователь не создан");
  }
});

router.post("/auth/login", async (req, res) => {
  // Check if user exists
  const user = await User.findOne({ email: req.body.email });
  if (!user) {
    res.status(400).send("Пользователя нету в базе");
    return;
  }
  if (user && bcrypt.compareSync(req.body.password, user.password)) {
    res.status(200).json({
      message: "Пользователь залогинился",
      status: "Успшно",
      token: generateToken(user._id),
      role: user.role
    });
  } else {
    res.status(400).send("Неверные данные. Bad request");
  }
});

router.post('/rent/', authUserMiddleware, async (req, res) => {
  const { carId } = req.body;
  const car = await Car.findOne({ _id: carId });
  const user = await User.findOne({_id: req.userId});

  if (car.enabled == false) {
    return res.status(403).json({ message: 'Auto is taken' });
  }

  if (user.balance < car.tariff)
    return res.status(403).json({ message: 'Auto is too expensive' });
  // for one day
  user.balance -= car.tariff;
  await user.save();

  car.enabled = false;
  await car.save();
  
  const newusercar = new Usercar({
    userId: req.userId,
    carId: car._id
  });
  await newusercar.save();

  res.status(201).json({ message: 'The entry created successfully', newusercar });
});

router.get("/rent/", authUserMiddleware, async (req, res) => {
  const usercar = await Usercar.find({userId: req.userId});
  console.log(usercar);

  let cars = usercar.map(entry => entry.carId);
  cars = await Car.find({ _id: { $in: cars } });

  res.status(200).send({ data: usercar, cars });
});

router.delete("/rent/:id", authUserMiddleware, async (req, res) => {
  const car = await Car.findOne({_id: req.params.id});
  const userOfCar = await Usercar.findOne({carId: req.params.id});
  // console.log(userOfCar);
  if (req.userId == userOfCar.userId) {
    await Usercar.deleteOne({carId: req.params.id});

    car.enabled = true;
    car.save();

    return res.status(200).send({ message: "удалена" });
  }
  return res.status(403).send({message: 'wrong user'})
});

router.get("/rent/balance", authUserMiddleware, async (req, res) => {
  const user = await User.findOne({_id: req.userId});
  console.log('azizizizi', user);

  res.status(200).send({ data: user['balance'] });
});

router.post('/rent/balance', authUserMiddleware, async (req, res) => {
  const { amount } = req.body;
  console.log('asdfasdfadsf'+amount);
  const user = await User.findOne({_id: req.userId});

  user.balance += amount;
  await user.save();

  res.status(201).json({ message: 'The paid successfully' });
});


I need the following pages:
login, register for user
page with all cars
page that shows one car and allows to rent it
page to replenish balance
page that lists rents (allows to remove rent)

Models:
Car:
const mongoose = require("mongoose");
const joi = require("joi");

const carSchema = new mongoose.Schema({
  name: {type: String, required: true},
  description: { type: String, required: true },
  enabled: { type: Boolean, default: true },
  tariff: {type: Number, required: true},
  image: {type: String}
});

const validate = (car) => {
  const schema = joi.object({
    description: joi.string().required(),
  });
  return schema.validate(car);
};

const Car = mongoose.model("car", carSchema);

module.exports = { Car, validate };


User:
const mongoose = require("mongoose");
const joi = require("joi");

const userSchema = new mongoose.Schema({
  email: { type: String, required: true },
  password: { type: String, required: true },
  balance: {type: Number, default: 0},
  role: {type: String}
});

// const validate = (task) => {
//   const schema = joi.object({
//     description: joi.string().required(),
//   });
//   return schema.validate(task);
// };

const User = m
ongoose.model("user", userSchema);

module.exports = { User };

UserCar:
const mongoose = require("mongoose");
const joi = require("joi");

const usercarSchema = new mongoose.Schema({
  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
  carId: { type: mongoose.Schema.Types.ObjectId, ref: 'Car' }
});

const validate = (usercar) => {
  const schema = joi.object({
    description: joi.string().required(),
  });
  return schema.validate(usercar);
};

const Usercar = mongoose.model("usercar", usercarSchema);

module.exports = { Usercar, validate };


IMPLEMENT EVERYTHING
